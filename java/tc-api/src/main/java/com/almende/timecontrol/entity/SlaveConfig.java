/* $Id$
 * $URL$
 * 
 * Part of the EU project Inertia, see http://www.inertia-project.eu/
 * 
 * @license
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Copyright (c) 2014 Almende B.V. 
 */
package com.almende.timecontrol.entity;

import io.coala.json.JsonUtil;
import io.coala.json.dynabean.DynaBean;
import io.coala.json.dynabean.DynaBean.BeanWrapper;
import io.coala.refer.Identifier;

import java.util.Properties;

import org.aeonbits.owner.Mutable;

import com.almende.timecontrol.TimeControl;
import com.fasterxml.jackson.core.TreeNode;

/**
 * {@link SlaveConfig}
 * 
 * @date $Date$
 * @version $Id$
 * @author <a href="mailto:rick@almende.org">Rick</a>
 */
@BeanWrapper(comparableOn = TimeControl.ID_KEY)
public interface SlaveConfig extends Comparable<SlaveConfig>, Mutable
{

	/** @return the {@link ID} of this {@link SlaveConfig} */
	@Key(TimeControl.ID_KEY)
	ID id();

	/** @return the {@link TimerConfig.ID} of this slave's master timer */
	@Key(TimeControl.TIMER_ID_KEY)
	TimerConfig.ID timerId();

	/**
	 * the (current) callback {@link URI} for this {@link SlaveConfig}, or
	 * {@code null} if unknown
	 */
	// @Key(TimeControl.ADDRESS_KEY)
	// URI address();

	/**
	 * last {@link Trigger} generated by this {@link SlaveConfig}, useful for
	 * re-registering
	 */
	@Key(TimeControl.LAST_TRIGGER_ID_KEY)
	Trigger.ID lastTriggerId();

	/**
	 * last {@link Job#ordinal} sent to this {@link SlaveConfig}, useful for
	 * re-registering
	 */
	@Key(TimeControl.LAST_JOB_ID_KEY)
	Job.ID lastJobId();

	/**
	 * {@link ID}
	 * 
	 * @date $Date$
	 * @version $Id$
	 * @author <a href="mailto:rick@almende.org">Rick</a>
	 */
	class ID extends Identifier<String>
	{
		/** @see org.aeonbits.owner.Converters.CLASS_WITH_VALUE_OF_METHOD */
		public static ID valueOf(final String value)
		{
			return Identifier.valueOf(value, ID.class);
		}
	}

	/**
	 * {@link Builder}
	 * 
	 * @date $Date$
	 * @version $Id$
	 * @author <a href="mailto:rick@almende.org">Rick</a>
	 */
	class Builder extends DynaBean.Builder<SlaveConfig, Builder>
	{

		/**
		 * {@link Builder} factory method
		 * 
		 * @param json the JSON-formatted {@link String}
		 * @param imports optional property defaults
		 * @return the new {@link Builder}
		 */
		public static Builder fromJSON(final String json,
				final Properties... imports)
		{
			return fromJSON(JsonUtil.valueOf(json), imports);
		}

		/** */
		// private static final Logger LOG = LogManager
		// .getLogger(SlaveConfig.Builder.class);

		/**
		 * {@link Builder} factory method
		 * 
		 * @param tree the partially parsed JSON object
		 * @param imports optional property defaults
		 * @return the new {@link Builder}
		 */
		public static Builder fromJSON(final TreeNode tree,
				final Properties... imports)
		{
			return new Builder(imports)
					.withId(tree.get(TimeControl.ID_KEY))
					.withTimerId(tree.get(TimeControl.TIMER_ID_KEY))
					.withLastTriggerId(
							tree.get(TimeControl.LAST_TRIGGER_ID_KEY))
					.withLastJobId(tree.get(TimeControl.LAST_JOB_ID_KEY));
		}

		/**
		 * @param id the JSON-formatted identifier value
		 * @param imports optional property defaults
		 * @return the new {@link Builder}
		 */
		public static Builder forID(final String id,
				final Properties... imports)
		{
			return new Builder(imports).withId(ID.valueOf(id));
		}

		/**
		 * {@link Builder} constructor, to be extended by a public zero-arg
		 * constructor in concrete sub-types
		 */
		public Builder(final Properties... imports)
		{
			super(imports);
		}

		public Builder withId(final TreeNode tree)
		{
			return withId(JsonUtil.valueOf(tree, ID.class));
		}

		public Builder withId(final ID id)
		{
			with(TimeControl.ID_KEY, id);
			return this;
		}

		public Builder withTimerId(final TreeNode tree)
		{
			return withTimerId(JsonUtil.valueOf(tree, TimerConfig.ID.class));
		}

		public Builder withTimerId(final TimerConfig.ID timerId)
		{
			with(TimeControl.TIMER_ID_KEY, timerId);
			return this;
		}

		public Builder withLastTriggerId(final TreeNode tree)
		{
			return withLastTriggerId(JsonUtil.valueOf(tree, Trigger.ID.class));
		}

		public Builder withLastTriggerId(final Trigger.ID triggerId)
		{
			with(TimeControl.LAST_TRIGGER_ID_KEY, triggerId);
			return this;
		}

		public Builder withLastJobId(final TreeNode tree)
		{
			return withLastJobId(JsonUtil.valueOf(tree, Job.ID.class));
		}

		public Builder withLastJobId(final Job.ID jobId)
		{
			with(TimeControl.LAST_JOB_ID_KEY, jobId);
			return this;
		}

		// public SlaveConfig build()
		// {
		// final SlaveConfig result = super.build();
		// LOG.trace("Created {}", result.timerId());
		// return result;
		// }

	}

}